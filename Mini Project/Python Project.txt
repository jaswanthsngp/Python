Python Report Format:
    Description:
	This app automates the process of car rental system, by taking details of customer and his selection of cars and giving the bill after the car is relieved.
    Objective/Scope:
	Handles user interfaces and databases and is limited to update records of database when a car is being rented or relieved and calculate the bill according to number of minutes it is used.
    Design
	User Interface
		It consists of two forms in seperate frames, one takes inputs to rent/book a car and another to relieve a car
		Form to book a car consists of
			- Text entries for Name, Drivind Licence ID, Mobile Number, Emergency Mobile number
			- Radio Buttons for Gender
			- Spin Box for Age
			- Combo Box to select from availiable cars
		For to relieve car consists of
			- Combo Box entries to select from car to be relieved and driving licence of the customer.
	Database
        Tables used
		- A table 'car' to store the details of car, which has attributes:
			'regNo varchar(10)' which stores the Registration Number of car, and acts as primary key
			'chasisNo varchar(255)' which stores the Chasis Number of the car
			'manufacturer varchar(255)' which stores the Manufacturer comapany
			'no_of_seats int' which stores the Number of Seats in car
		- A table 'person' to store the details of the customer, which has attributes:
			'name varchar(30)' to store the Name of the customer
			'age int' to store the Age of the customer
			'gender varchar(10)' to store the Gender of the customer
			'licence varchar(255)' to store the Diving Licence ID of the customer which also acts as a primary key to the table
			'mobile bigint' to store the Mobile Number of the customer
			'emergency_mobile bigint' to store the Emergency Mobile Number of the customer
		- A table 'rent' to store rental details which has attributes:
			'carNO varchar(10)' to store registration number of the car
			'plicence varcar(255)' to store Driving Licence ID of customer who took the car
			'tookAt int' to store the time at which car is taken and application refers to this value at the time of billing
        Relationship between tables
		'rent' table defines the relationship between the 'car' and 'person' tables
        Algorithms/DataStructures used
		For booking a car
			- user enters the inputs and submits them
			- application searches for the licence user entered in 'person' table
				- If the licence is found, it asks user to update details or not
				- Else, it inserts the values into the person table
			- car's registration no, person's licence and current time are inserted into 'rent' table
		For relieving a car
			- user enters the inputs and submits the form
			- if the driving licence and car matches according to rent table 
				- application reads the time from database and subtracts it from current time to get the number of seconds
				- the result undergoes floor division operation by 60 to get the number of minutes
				- cost per minute (Re. 1 in this case) is multiplied with number of minutes to calculate the bill
			- Else, it prompts user to enter correct details
		Lists are used to assign values to the Combobox in the interface which are fetched from Database
		Tuples are used to manipulate data stored in databases through insertion and deletion
		A linear search algorithm to search if the data is already stored in database
		A simple floor division and multiplication to calculate the bill
    Results and Screenshots
    Contribution
    References
	